name: CD

on:
  push:
    tags:
      - "v*.*.*"

env:
  CARGO_TERM_COLOR: always

defaults:
  run:
    shell: bash

jobs:
  prepare:
    name: "Prepares the release"
    runs-on: ubuntu-latest

    outputs:
      tag_name: ${{ steps.release_info.outputs.tag_name }}
      release_name: ${{ steps.release_info.outputs.release_name }}
      changelog: ${{ steps.build_changelog.outputs.changelog }}

    steps:
      - name: "Clones the repository"
        uses: actions/checkout@v3

      - name: "Computes release name and tag"
        id: release_info
        run: |
          echo "::set-output name=tag_name::${GITHUB_REF_NAME}"
          echo "::set-output name=release_name::${GITHUB_REF_NAME}"

      - name: "Builds the changelog"
        id: build_changelog
        uses: mikepenz/release-changelog-builder-action@v3.3.1
        with:
          configuration: "./.github/config/release_changelog.json"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release:
    needs:
      - "prepare"

    strategy:
      matrix:
        job:
          - os: ubuntu-latest
            platform: linux
            target: x86_64-unknown-linux-gnu
            arch: amd64

          - os: ubuntu-latest
            platform: linux
            target: aarch64-unknown-linux-gnu
            arch: arm64

          - os: macos-latest
            platform: darwin
            target: x86_64-apple-darwin
            arch: amd64

          - os: macos-latest
            platform: darwin
            target: aarch64-apple-darwin
            arch: arm64

          - os: windows-latest
            platform: win32
            target: x86_64-pc-windows-msvc
            arch: amd64

    name: "Release on ${{ matrix.job.os }} - ${{ matrix.job.target }}"
    runs-on: ${{ matrix.job.os }}

    steps:
      - name: "Clones the repository"
        uses: actions/checkout@v3

      - name: "Setup for Apple M1"
        if: ${{ matrix.job.target == 'aarch64-apple-darwin' }}
        run: |
          echo "SDKROOT=$(xcrun -sdk macosx --show-sdk-path)" >> $GITHUB_ENV
          echo "MACOSX_DEPLOYMENT_TARGET=$(xcrun -sdk macosx --show-sdk-platform-version)" >> $GITHUB_ENV

      - name: "Setup for Linux ARM"
        if: ${{ matrix.job.target == 'aarch64-unknown-linux-gnu' }}
        run: |
          sudo apt-get update -y
          sudo apt-get install -y gcc-aarch64-linux-gnu
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV

      - name: "Install Rust toolchain"
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.job.target }}
          override: true
          profile: minimal

      - name: "Build binary"
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --bins --target ${{ matrix.job.target }}

      - name: "Archive binary"
        id: artifacts
        env:
          PLATFORM_NAME: ${{ matrix.job.platform }}
          TARGET: ${{ matrix.job.target }}
          ARCH: ${{ matrix.job.arch }}
          VERSION_NAME: ${{ needs.prepare.outputs.tag_name }}
        run: |
          if [ "$PLATFORM_NAME" == "linux" ]; then
            tar -czvf "sigop_${VERSION_NAME}_${PLATFORM_NAME}_${ARCH}.tar.gz" -C ./target/${TARGET}/release sigop
            echo "::set-output name=file_name::sigop_${VERSION_NAME}_${PLATFORM_NAME}_${ARCH}.tar.gz"
          elif [ "$PLATFORM_NAME" == "darwin" ]; then
            # We need to use gtar here otherwise the archive is corrupt.
            # See: https://github.com/actions/virtual-environments/issues/2619
            gtar -czvf "sigop_${VERSION_NAME}_${PLATFORM_NAME}_${ARCH}.tar.gz" -C ./target/${TARGET}/release sigop
            echo "::set-output name=file_name::sigop_${VERSION_NAME}_${PLATFORM_NAME}_${ARCH}.tar.gz"
          else
            cd ./target/${TARGET}/release
            7z a -tzip "sigop_${VERSION_NAME}_${PLATFORM_NAME}_${ARCH}.zip" sigop.exe
            mv "sigop_${VERSION_NAME}_${PLATFORM_NAME}_${ARCH}.zip" ../../../
            echo "::set-output name=file_name::sigop_${VERSION_NAME}_${PLATFORM_NAME}_${ARCH}.zip"
          fi

      - name: "Creates the release"
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ needs.prepare.outputs.release_name }}
          tag_name: ${{ needs.prepare.outputs.tag_name }}
          body: ${{ needs.prepare.outputs.changelog }}
          files: |
            ${{ steps.artifacts.outputs.file_name }}

  publish:
    needs:
      - "release"

    name: "Publish binary to crates.io"
    runs-on: ubuntu-latest

    steps:
      - name: "Clones the repository"
        uses: actions/checkout@v3

      - name: "Setup Rust toolchain"
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: "Publish to crates.io"
        uses: katyo/publish-crates@v1
        with:
          registry-token: ${{ secrets.CARGO_REGISTRY_TOKEN }}
